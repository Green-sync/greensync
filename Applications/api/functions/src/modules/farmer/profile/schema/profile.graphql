
type Profile {
    name: String
    surname: String
    email: String
    PhoneNumbers: String
    password: String
    website: String 
    photoURL: String
    homeAddress: String
   
}

input ProfileInput {
    userId: ID
    name: String
    surname: String
    email: String
    PhoneNumbers: String
    password: String
    website: String 
    photoURL: String
    homeAddress: String
    farms: [IFarm!]!
  }
 
 input IFarm {
    name: String!
    location: String
    size: Float!
    description: String
    crops: [ICrop]
    livestocks: [ILivestock]
 }

 input ICrop {
    farmId: ID
    title: String
    name: String
    quantity: String
    stage: String
    plantingDate: String
    harvestDate: String
    healthStatus: Status
 } 

 enum Status {
     GOOD
     BAD
     EXCELLENT
 }

 input ILivestock {
    farmId: ID
    type: String!
    name: String
    image: String
    stage: String
    quantity: Int
    healthStatus: String
    
 }


type ProfileResponse {
    success: Boolean
    message: String
}
extend type Query {
    getUserByUserId(userId: ID!): [Profile]
    
}

extend type Mutation {
    createUser(profile: ProfileInput): ProfileResponse
    editUser(profileId: ID, updates: ProfileInput): ProfileResponse 
    deleteUser(profileId: ID): ProfileResponse 
}